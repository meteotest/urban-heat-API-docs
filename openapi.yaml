openapi: 3.0.0
info:
  title: Smart Urban Heat Map API
  description: |
    This OpenAPI specification describes the **Open-Data API** of the [Smart Urban Heat Map Bern Project](https://urban-heat.meteotest.ch).  

    The Smart Urban Heat Map is an initiative of the [Smart City Verein Bern](https://www.smartcity-bern.ch/) to visualize urban heat in the city and region of Bern.
    Valuable pioneering work has been done by the Climatology Group at the [Geographical Institute of the University of Bern (GIUB)](https://www.geography.unibe.ch/index_eng.html), which has been operating an urban measurement network since 2018, consisting of around 80 stations. The Smart City Verein Bern, together with the company [Abilium GmbH](https://www.abilium.io/), the [Bern University of Applied Sciences](https://www.bfh.ch/de/forschung/forschungsbereiche/public-sector-transformation/) and the company [Meteotest](https://meteotest.ch/), has extended this measuring network into the Bern region by around 40 measuring stations.

    Based on this measurement network, the Smart Urban Heat Map API offers access to detailed city climate data for the region of Bern, Switzerland. 
    Users can retrieve current measurements of temperature, relative humidity, and station metadata, as well as station-bound time series data. 
    The data provides valuable insights for urban planning and environmental studies.

    The OpenAPI specification is complemented by an [API documentation](../) and a [python notebook](../python_examples.ipynb) which includes examples of how to request and visualize the data using Python.  
    The notebook can be run **locally or directly in the browser** using [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/JurekMueller/SUH_Bern_API_Doc/main?labpath=python_examples.ipynb)
    or [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/JurekMueller/SUH_Bern_API_Doc/blob/main/python_examples.ipynb).

    **Disclaimer Temperature Bias**  
    To reduce the potential temperature bias when stations are exposed to direct sunlight, all stations are ventilated before measuring.  
    However, in some cases, especially during the day, measured temperatures might still be slightly higher than actual temperatures.

    **Licensing Information**
    This data is available under the Creative Commons Attribution License (CC-BY).
    Please ensure that you provide proper attribution when using or redistributing this
    data in your projects or applications.

    **Attribution Example**  
    Data provided by the Smart Urban Heat Map Project for Bern, Switzerland.

    **Contact Information**  
    For questions regarding the data, please contact the [BFH](mailto:jurek.mueller@bfh.ch).  
    For technical questions regarding the API, please contact [Meteotest](mailto:office@meteotest.ch).

  license:
    name: "Creative Commons Attribution License (CC-BY)"
    url: "https://creativecommons.org/licenses/by/4.0/"
  version: 1.0.0
servers:
  - url: "https://urban-heat.meteotest.ch/api/1.0"
    description: Production server

paths:

  /stations:
    get:
      summary: Retrieve current measurements and station geodata.
      description: |
        Retrieves station data including most recent measured values for:
        - Temperature in Celsius (°C).
        - Relative humidity in percentage (%).

        Measurments occur every 10 min.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StationsResponse"
              example:
                type: "FeatureCollection"
                features:
                  - type: "Feature"
                    geometry:
                      type: "Point"
                      coordinates: [46.94067, 7.43141]
                    properties:
                      stationId: "3A0551FEFF6E959E"
                      name: "Eigerplatz-Bern"
                      dateObserved: "2023-10-05T11:36:29Z"
                      temperature: 18.925001
                      relativeHumidity: 60.971848
                  - type: "Feature"
                    geometry:
                      type: "Point"
                      coordinates: [46.96681, 7.439139]
                    properties:
                      stationId: "140551FEFF6E959E"
                      name: "Worblen-Ostermundigen"
                      dateObserved: "2023-10-05T11:36:27Z"
                      temperature: 18.791485
                      relativeHumidity: 62.507286
            text/csv:
              schema:
                type: string
                example: "stationId;stationName;lat;lon;dateObserved;temperature;relativeHumidity\n
                 3A0551FEFF6E959E;Eigerplatz-Bern;46.94067;7.43141;2023-10-05T11:36:29Z;18.925001;60.971848\n
                 140551FEFF6E959E;Worblen-Ostermundigen;46.96681;7.439139;2023-10-05T11:36:27Z;18.791485;62.507286"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /timeseries:
    get:
      summary: Retrieve measurement time series based on stationId.
      description: |
        Retrieves time series based on stationId for:
        - Temperature is in Celsius (°C).
        - Relative Humidity is in percentage (%).

        Measurments occur every 10 min.
      parameters:
        - $ref: "#/components/parameters/stationId"
        - $ref: "#/components/parameters/timeFrom"
        - $ref: "#/components/parameters/timeTo"
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeseriesResponse"
              example:
                stationId: "140551FEFF6E959E"
                values:
                  - dateObserved: "2023-10-05T11:36:27Z"
                    temperature: 18.791485
                    relativeHumidity: 62.507286
                  - dateObserved: "2023-10-05T11:46:27Z"
                    temperature: 19.261463
                    relativeHumidity: 65.149
            text/csv:
              schema:
                type: string
                example: "dateObserved;temperature;relativeHumidity\n
                  2023-10-05T11:36:27Z;18.791485;62.507286\n
                  2023-10-05T11:46:27Z;19.261463;65.149"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  parameters:

    timeFrom:
      name: timeFrom
      in: query
      required: false
      description: >
        Start time of request.

        Either
        <ul>
        <li>RFC3339 UTC (YYYY-MM-DDThh:mm:ssZ),</li>
        <li>the string "now", or</li>
        <li>a relative date/time string (relative with respect to the current time).</li>
        </ul>

        Examples of relative date/time strings:

        <ul>
        <li><code>now</code></li>
        <li><code>-24hours</code></li>
        <li><code>-30minutes</code></li>
        <li><code>-3days</code></li>
        </ul>
      example: "2023-10-01T00:00:00Z"
      schema:
        type: string
        pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z|now|-\\d+(minutes|hours|days)$"
        default: "-48hours"

    timeTo:
      name: timeTo
      in: query
      required: false
      description: >
        End time of request.

        <p>
          See <code>timeFrom</code> for details.
        </p>
      example: "2023-10-02T00:00:00Z"
      schema:
        type: string
        pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z|now|[-\\+]\\d+(minutes|hours|days)$"
        default: "now"

    stationId:
      name: stationId
      in: query
      required: true
      description: unique station ID.
      example: "4540CBFEFFE70FFE"
      schema:
        type: string


  schemas:

    StationsResponse:
      description: >
        List all stations including most recent measurements.
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          readOnly: true
          description: "type of object"
          example: "FeatureCollection"
        features:
          type: array
          items:
            $ref: "#/components/schemas/Feature"

    TimeseriesResponse:
      description: >
        Successful time series response.
      type: object
      required:
        - stationId
        - values
      properties:
        stationId:
          type: string
          readOnly: true
          description: "unique station ID"
        values:
          type: array
          items:
            $ref: "#/components/schemas/Value"

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: "#/components/schemas/Error"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    Feature:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          readOnly: true
          description: "type of object"
          example: "Feature"
        geometry:
          $ref: "#/components/schemas/Geometry"
        properties:
          $ref: "#/components/schemas/StationProperties"

    Geometry:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          readOnly: true
          description: "type of geometry object"
          example: "Point"
        coordinates:
          $ref: "#/components/schemas/Coordinates"

    StationProperties:
      type: object
      properties:
        stationId:
          type: string
          readOnly: true
          description: "unique station ID"
        name:
          type: string
          readOnly: true
          description: "name of the station"
          example: "Bollwerk"
        dateObserved:
          $ref: "#/components/schemas/datetime"
        temperature:
          type: number
          readOnly: true
          description: "last measured temperature [°C]"
        relativeHumidity:
          type: number
          readOnly: true
          description: "last measured relative humidity [%]"

    Coordinates:
      type: array
      description: "lat/lon coordinates in the WGS 84 system"
      items:
        type: number
      minItems: 2
      maxItems: 2
      example:
        [46.346, 7.456]

    Value:
      type: object
      required:
        - dateObserved
        - temperature
        - relativeHumidity
      properties:
        dateObserved:
          $ref: "#/components/schemas/datetime"
        temperature:
          type: number
          readOnly: true
          description: "measured temperature [°C]"
        relativeHumidity:
          type: number
          readOnly: true
          description: "measured relative humidity [%]"

    datetime:
      type: string
      format: date-time
      description: issue time RFC3339 UTC
      example: "2022-07-06T17:00:20Z"
